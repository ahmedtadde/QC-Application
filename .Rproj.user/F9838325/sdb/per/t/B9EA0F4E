{
    "collab_server" : "",
    "contents" : "source('functions.R')\nlibraries()\nWD <- getwd()\nshinyServer(function(input, output, session) {\n  \n  ##=============================================================================\n  ##\n  ##                                  TAB 1 (ASCII)\n  ##\n  ##=============================================================================\n  \n  PATH <- reactive({\n    \n    if (is.null(input$ascii)){\n      return(NULL)\n    }else{\n      return(input$ascii)\n    }\n  })\n  \n  ASCII <- reactive({\n    if (is.null(PATH())){\n      return(NULL)\n    }else{\n      return(getASCII(PATH()))\n    }\n  })\n  \n  output$ascii.status <- renderUI({\n    \n    if(is.null(ASCII())){\n      tags$b(tags$em(\"\"))\n    }else{\n      if(names(ASCII())[1] %in% \"STATUS\"){\n        tags$b(tags$em(\"Selected File is NOT an ASCII Layout File\"))\n      }else{\n        tags$b(tags$em(\"ASCII FILE LOADED\"))\n      }\n      \n    }\n    \n  })\n  \n  \n  output$record.type <- renderUI({\n    if(is.null(ASCII())){\n      return(NULL)\n    }else if(names(ASCII())[1] %in% \"STATUS\"){\n      return(NULL)\n    }else{\n      selectizeInput(\"recordtype\",\n                     \"Record Type\",\n                     selected = \"Select\",\n                     choices = c(\"Select\", ASCII()$`Record Type`),\n                     multiple = F\n      )\n      \n    }\n  })\n  \n  output$ascii.table <- DT::renderDataTable({\n    \n    if(is.null(ASCII())){\n      return(NULL)\n    }else if(is.null(PATH())){\n      return(NULL)\n    }else if(is.null(input$recordtype)){\n      return(NULL)\n    }else if(input$recordtype %in% \"Select\"){\n      return(NULL)\n    }else if(names(ASCII())[1] %in% \"STATUS\"){\n      return(NULL)\n    }else{\n      \n      table <- ASCII() %>% \n        filter(`Record Type` %in% input$recordtype )%>% \n        filter(`Variable Name` != \"rectype\") %>%\n        select(c(2:6))\n      \n      table$`Minimum value` <- as.integer(table$`Minimum value`)\n      table$`Maximum value` <- as.integer(table$`Maximum value`)\n      \n      datatable(table,rownames = F)\n    }\n  })\n  \n  \n  ##=============================================================================\n  ##\n  ##                                  TAB 2 (DATA QC)\n  ##\n  ##=============================================================================\n  \n  directory <- reactive({\n    if(is.null(input$path)) return(NULL)\n    if(\"\" %in% input$path) return(NULL)\n    if(length(input$path) == 0)return(NULL)\n    setwd(input$path)\n    files <- c(list.files(pattern = \"*.txt\"), list.files(pattern = \"*.csv\"))\n    setwd(WD)\n    return(files)\n  })\n  \n  output$fileSelection <- renderUI({\n    if(is.null(directory)) return(NULL)\n    selectizeInput(\"FileSelection\",\n                   \"Select File(s)\",\n                   choices = c(\"All\",sort(directory())),\n                   multiple = T,\n                   selected = \"\",\n                   width = '80%'\n                   \n    )\n  })\n  \n  \n  FileSelectionGO <- eventReactive(input$fileSelectionGO,{\n    if(is.null(input$fileSelectionGO)) return(NULL)\n    if(input$fileSelectionGO <= 0) return(NULL)\n    if(is.null(input$FileSelection)) return(NULL)\n    if(\"\" %in% input$FileSelection) return(NULL)\n    \n    \n    setwd(input$path)\n    \n    \n    \n    if(length(input$FileSelection) ==1){\n      \n      if(\"All\" %in% input$FileSelection){\n        selection <-  c(list.files(pattern = \"*.txt\"), list.files(pattern = \"*.csv\"))\n        masterFiles <- which(grepl(\"master\", selection, ignore.case = T))\n        if(length(masterFiles)!=0){\n          selection <- selection[-c(which(grepl(\"master\", selection, ignore.case = T)))]\n        }; rm(masterFiles)\n        \n        DataList <- parLapply(makeCluster(detectCores()),selection, getDATA)\n        check <- foreach(i=1:length(DataList),.combine = c) %dopar%{\n          dim(DataList[[i]])[2]\n        }\n        \n        if(length(unique(check)) != 1){\n          rm(check); rm(DataList); rm(selection)\n          return(NULL)\n        }else{\n          DT <- rbindlist(DataList); rm(DataList); rm(check); rm(selection)\n        }\n        \n      }else{\n        DT <- getDATA(input$FileSelection)\n      }\n      \n      \n    }else{\n      \n      if(\"All\" %in% input$FileSelection){\n        selection <-  c(list.files(pattern = \"*.txt\"), list.files(pattern = \"*.csv\"))\n        masterFiles <- which(grepl(\"master\", selection, ignore.case = T))\n        if(length(masterFiles)!=0){\n          selection <- selection[-c(which(grepl(\"master\", selection, ignore.case = T)))]\n        }; rm(masterFiles)\n        DataList <- parLapply(makeCluster(detectCores()),selection,getDATA)\n        check <- foreach(i=1:length(DataList),\n                         .combine = c,\n                         .packages = c('base','parallel','doParallel',\"snow\",\"doSNOW\",\"data.table\")) %dopar%{\n                           dim(DataList[[i]])[2]\n                         }\n        \n        if(length(unique(check)) != 1){\n          rm(check); rm(DataList); rm(selection)\n          return(NULL)\n        }else{\n          DT <- rbindlist(DataList); rm(DataList); rm(check); rm(selection)\n        }\n        \n      }else{\n        \n        DataList <- parLapply(makeCluster(detectCores()),input$FileSelection,getDATA)\n        check <- foreach(i=1:length(DataList),\n                         .combine = c,\n                         .packages = c('base','parallel','doParallel',\"snow\",\"doSNOW\",\"data.table\")) %dopar%{\n                           dim(DataList[[i]])[2]\n                         }\n        \n        if(length(unique(check)) != 1){\n          rm(check); rm(DataList)\n          return(NULL)\n        }else{\n          DT <- rbindlist(DataList); rm(DataList); rm(check)\n        }\n      }\n    }\n    \n    setwd(WD)\n    return(data.table(DT))\n    \n  })\n  \n  dataset <- reactive({\n    if(is.null(FileSelectionGO())) return(NULL)\n    return(data.table(FileSelectionGO()))\n  })\n  \n  \n  output$recordtype.QC <- renderUI({\n    if(is.null(PATH())){\n      return(NULL)\n    }else if(is.null(ASCII())){\n      return(NULL)\n    }else if(names(ASCII())[1] %in% \"STATUS\"){\n      return(NULL)\n    }else{\n      selectizeInput(\"recordtype.qc\",\n                     \"Select Record Type\",\n                     selected = \"\",\n                     choices = c(\"\", ASCII()$`Record Type`),\n                     multiple = F\n      )\n    }\n  })\n  \n  output$Apply.ASCII <- renderUI({\n    \n    if(is.null(PATH())){\n      return(NULL)\n    }else if(is.null(ASCII())){\n      return(NULL)\n    }else if(names(ASCII())[1] %in% \"STATUS\"){\n      return(NULL)\n    }else if(is.null(input$recordtype.qc)){\n      return(NULL)\n    }else if(\"\" %in% input$recordtype.qc){\n      return(NULL)\n    }else{\n      \n      radioButtons(\"Apply.Ascii\", \n                   label = \"Apply ASCII Specs\",\n                   choices = c(\"No\",\"Yes\"),\n                   selected = \"No\",\n                   inline = T\n      )\n    }\n    \n    \n  })\n  \n  ApplyASCII <- reactive({\n    \n    if(is.null(input$Apply.Ascii)) return(NULL)\n    if(input$Apply.Ascii %in% \"No\") return(NULL)\n    \n    table <- ASCII() %>% \n      filter(`Record Type` %in% input$recordtype.qc )%>% \n      filter(`Variable Name` != \"rectype\") %>%\n      select(c(2:6))\n    \n    \n    \n    all.variables <- table$`Variable Name`\n    all.descriptions <- table$`Description`\n    table$`Minimum value` <- as.integer(table$`Minimum value`)\n    table$`Maximum value` <- as.integer(table$`Maximum value`)\n    \n    searchTerms <- c(\"lev|lvl|pass|gender|ucrxgen|grade|flag|condition|_complete|procomp|status|subject|test|title_iii|proficiency\")\n    Rows <- which(grepl(searchTerms, table$`Variable Name`, ignore.case = T))\n    \n    if(length(Rows) != 0){\n      \n      table <- table[Rows,] %>% select(which(names(table) %in% c(\"Variable Name\",\"Description\",\"Nominal value definitions\")))\n      table <- data.table(table)\n      setnames(table, names(table), c(\"variable\",\"description\",\"values\"))\n      table <- data.table(table %>% filter(!is.na(values)))\n      \n      if(dim(table)[1] !=0){\n        \n        Values <- table$values\n        foreach(i =1: length(Values), .packages = c('stringi','tidyr','foreach'), .combine = rbind) %dopar%{\n          \n          \n          \n          result <- gsub(\";\",\",\", Values[i], ignore.case = T)\n          result <- gsub(\"<\", \"\", result, ignore.case = T)\n          result <- gsub(\">\", \"\", result, ignore.case = T)\n          result <- gsub(\"\\\\.\", \",\", result, ignore.case = T)\n          result <- gsub(\"blank\",\"\", result, ignore.case = T)\n          result <- gsub(\",$\", \"\", result, ignore.case = T)\n          result <- gsub(\"^,\", \"\", result, ignore.case = T)\n          \n          result <- stri_trim(result)\n          \n          result <- unlist(stri_split(result, fixed = \",\"))\n          dt <- data.frame(\"code\" = result)\n          dt <- separate(dt, code, c(\"code\",\"description\"), sep =\"=\")\n          \n          foreach(j = 1:length(dt$code)) %do%{\n            if(unlist(stri_split(dt$code[j], fixed =\" \"))[1] %in% \"Note\"){\n              dt$code[j] <- unlist(stri_split(dt$code[j], fixed = \" \"))[3]\n            }\n          };rm(j)\n          \n          dt$variable <- table$variable[i]\n          \n          return(dt)\n        } -> dt  ; dt <- data.table(\"variable\" =dt$variable, \"value\" = dt$code, \"meaning\" = dt$description)\n        \n        \n        GET <- list(\"all.variables\" = all.variables,\n                    \"all.descriptions\" = all.descriptions,\n                    \"map\" = dt, \"case\" = 1)\n        \n      }else{\n        \n        GET <- list(\"all.variables\" = all.variables,\n                    \"all.descriptions\" = all.descriptions,\n                    \"case\"= 2)\n        \n      }\n      \n      \n    }else{\n      GET <- list(\"all.variables\" = all.variables,\n                  \"all.descriptions\" = all.descriptions,\n                  \"case\"= 2)\n    }\n    \n    \n    \n    \n    \n  })\n  \n  \n  \n  ApplyAscii <- reactive({\n    \n    if(is.null(ApplyASCII())) return(NULL)\n    \n    return(ApplyASCII())\n    \n  }) \n  \n  \n  \n  output$apply.ascii.message <- renderTable({\n    \n    if(is.null(dataset())) return(NULL)\n    if(is.null(ApplyAscii())) return(NULL)\n    \n    if(all(tolower(stri_trim(names(dataset()))) %in% tolower(stri_trim(ApplyAscii()$all.variables))) != T){\n      \n      tableMismatches <- tolower(stri_trim(names(dataset()))) %in% tolower(stri_trim(ApplyAscii()$all.variables))\n      tableMismatches <- names(dataset())[which(tableMismatches %in% FALSE)]\n      \n      asciiMismatches <- tolower(stri_trim(ApplyAscii()$all.variables)) %in% tolower(stri_trim(names(dataset())))\n      asciiMismatches <- ApplyAscii()$all.variables[which(asciiMismatches %in% FALSE)]\n      \n      table <- data.table(\"Number of Variables\" = c(length(ApplyAscii()$all.variables), length(names(dataset()))),\n                          \"Missing Variable(s)\" = c(paste0(tableMismatches,collapse = \"|\"), paste0(asciiMismatches,collapse = \"|\")))\n      \n      row.names(table) <- c(\"ASCII\",\"SPREADSHEET\")\n      \n      return(table)\n    }else{\n      \n      return(NULL)\n      \n    }\n  })\n  \n  \n  PathtoCutpoints <- eventReactive(input$cutpointTables,{\n    \n    if(input$cutpointTables <= 0) return(NULL)\n    filepaths <- choose.files(default = \"../..\",\n                              caption = \"Select tables\",\n                              multi = T\n    )\n    if(length(filepaths) == 0) return(NULL)\n    \n    return(filepaths)\n  }) \n  \n  CutpointFiles <- reactive({\n    \n    if(is.null(PathtoCutpoints())) return(NULL)\n    filepaths <- PathtoCutpoints()\n    foreach(i=1:length(filepaths))%dopar%{\n      source('functions.R')\n      return(getCUTPOINTS(filepaths[i]))\n    } -> tables\n    \n    foreach(i=1:length(tables),.combine = c ) %dopar%{\n      if(is.null(tables[[i]])) return(T)\n      if(!is.data.table(tables[[i]])) return(T)\n      return(FALSE)\n    } -> checkTables\n    \n    if(sum(checkTables) != 0 ) return(NULL)\n    \n    filenames <- foreach(i=1:length(filepaths), .combine = c) %do%{ return(stri_split(basename(filepaths[i]), fixed = \".\")[[1]][1])} \n    names(tables) <- filenames; rm(filenames); rm(filepaths)\n    \n    return(tables)\n    \n  })\n  \n  numberOfTables <- reactive({\n    if(is.null(CutpointFiles())) return(NULL)\n    if(length(CutpointFiles())== 0)  return(NULL)\n    return(length(CutpointFiles()))\n  })\n  \n  \n  output$displayCutpointTables <- renderUI({\n    if(is.null(numberOfTables())) return(NULL)\n    \n    if(numberOfTables() == 1){\n      tabsetPanel(type = \"tabs\", \n                  tabPanel(names(CutpointFiles())[1], DT::dataTableOutput(\"ViewTable1\"))\n      )\n      \n    }else if(numberOfTables() ==2){\n      tabsetPanel(type = \"tabs\", \n                  tabPanel(names(CutpointFiles())[1], DT::dataTableOutput(\"ViewTable1\")),\n                  tabPanel(names(CutpointFiles())[2], DT::dataTableOutput(\"ViewTable2\"))\n      )\n    }else if(numberOfTables() ==3){\n      tabsetPanel(type = \"tabs\", \n                  tabPanel(names(CutpointFiles())[1], DT::dataTableOutput(\"ViewTable1\")),\n                  tabPanel(names(CutpointFiles())[2], DT::dataTableOutput(\"ViewTable2\")),\n                  tabPanel(names(CutpointFiles())[3], DT::dataTableOutput(\"ViewTable3\"))\n      )\n      \n    }else if(numberOfTables() ==4){\n      tabsetPanel(type = \"tabs\", \n                  tabPanel(names(CutpointFiles())[1], DT::dataTableOutput(\"ViewTable1\")),\n                  tabPanel(names(CutpointFiles())[2], DT::dataTableOutput(\"ViewTable2\")),\n                  tabPanel(names(CutpointFiles())[3], DT::dataTableOutput(\"ViewTable3\")),\n                  tabPanel(names(CutpointFiles())[4], DT::dataTableOutput(\"ViewTable4\"))\n      )\n      \n    }else if(numberOfTables() ==5){\n      tabsetPanel(type = \"tabs\", \n                  tabPanel(names(CutpointFiles())[1], DT::dataTableOutput(\"ViewTable1\")),\n                  tabPanel(names(CutpointFiles())[2], DT::dataTableOutput(\"ViewTable2\")),\n                  tabPanel(names(CutpointFiles())[3], DT::dataTableOutput(\"ViewTable3\")),\n                  tabPanel(names(CutpointFiles())[4], DT::dataTableOutput(\"ViewTable4\")),\n                  tabPanel(names(CutpointFiles())[5], DT::dataTableOutput(\"ViewTable5\"))\n      )\n      \n    }else if(numberOfTables() ==6){\n      tabsetPanel(type = \"tabs\", \n                  tabPanel(names(CutpointFiles())[1], DT::dataTableOutput(\"ViewTable1\")),\n                  tabPanel(names(CutpointFiles())[2], DT::dataTableOutput(\"ViewTable2\")),\n                  tabPanel(names(CutpointFiles())[3], DT::dataTableOutput(\"ViewTable3\")),\n                  tabPanel(names(CutpointFiles())[4], DT::dataTableOutput(\"ViewTable4\")),\n                  tabPanel(names(CutpointFiles())[5], DT::dataTableOutput(\"ViewTable5\")),\n                  tabPanel(names(CutpointFiles())[6], DT::dataTableOutput(\"ViewTable6\"))\n      )\n      \n    }else{\n      return(NULL)\n    }\n    \n  })\n  \n  \n  output$ViewTable1 <- DT::renderDataTable({\n    if(is.null(numberOfTables())) return(NULL)\n    if(numberOfTables() >= 1){\n      \n      table <- CutpointFiles()[[1]]\n      table$Subject <- gsub(\"\\\\[\",\"\",table$Subject)\n      table$Subject <- gsub(\"\\\\]\",\"\",table$Subject)\n      table$Subject <- gsub(\"\\\\(\",\"\",table$Subject)\n      table$Subject <- gsub(\"\\\\)\",\"\",table$Subject)\n      table$Subject <- as.character(table$Subject)\n      \n      \n      \n      \n      foreach(i =1:dim(table)[2], .combine = c) %dopar%{\n        if(all(is.na(table[[i]])) == TRUE){\n          return(i)\n        }\n      } -> selection\n      \n      if(length(selection) != 0){\n        table <- data.table(table %>% select(-c(selection)))\n      }\n      \n      rm(selection)\n      \n      table[[dim(table)[2]]] <- gsub(\"\\\\[\",\"\",table[[dim(table)[2]]])\n      table[[dim(table)[2]]] <- gsub(\"\\\\]\",\"\",table[[dim(table)[2]]])\n      table[[dim(table)[2]]] <- gsub(\"\\\\(\",\"\",table[[dim(table)[2]]])\n      table[[dim(table)[2]]] <- gsub(\"\\\\)\",\"\",table[[dim(table)[2]]])\n      table[[dim(table)[2]]] <- as.character(table[[dim(table)[2]]])\n      \n      datatable(\n        table,\n        rownames = F,\n        # selection=\"multiple\",\n        # escape=FALSE,\n        extensions = c(\n          'Buttons',\n          # 'ColReorder'\n          'Responsive'\n        ),\n        \n        options = list(\n          dom = 'Bfrtip',\n          # autoWidth = T,\n          # lengthMednu = list(c(5,10,25,50,100,-1), c(\"5\",\"10\",\"25\",\"50\",\"100\",\"All\")),\n          buttons = list('csv',I('colvis')),\n          # colReorder = TRUE,\n          Responsive = T\n        )\n      )\n      \n    }else{\n      return(NULL)\n    }\n  })\n  \n  output$ViewTable2 <- DT::renderDataTable({\n    if(is.null(numberOfTables())) return(NULL)\n    if(numberOfTables() >= 2){\n      \n      table <- CutpointFiles()[[2]]\n      table$Subject <- gsub(\"\\\\[\",\"\",table$Subject)\n      table$Subject <- gsub(\"\\\\]\",\"\",table$Subject)\n      table$Subject <- gsub(\"\\\\(\",\"\",table$Subject)\n      table$Subject <- gsub(\"\\\\)\",\"\",table$Subject)\n      table$Subject <- as.character(table$Subject)\n      \n      \n      \n      \n      foreach(i =1:dim(table)[2], .combine = c) %dopar%{\n        if(all(is.na(table[[i]])) == TRUE){\n          return(i)\n        }\n      } -> selection\n      \n      if(length(selection) != 0){\n        table <- data.table(table %>% select(-c(selection)))\n      }\n      \n      rm(selection)\n      \n      table[[dim(table)[2]]] <- gsub(\"\\\\[\",\"\",table[[dim(table)[2]]])\n      table[[dim(table)[2]]] <- gsub(\"\\\\]\",\"\",table[[dim(table)[2]]])\n      table[[dim(table)[2]]] <- gsub(\"\\\\(\",\"\",table[[dim(table)[2]]])\n      table[[dim(table)[2]]] <- gsub(\"\\\\)\",\"\",table[[dim(table)[2]]])\n      table[[dim(table)[2]]] <- as.character(table[[dim(table)[2]]])\n      \n      datatable(\n        table,\n        rownames = F,\n        # selection=\"multiple\",\n        # escape=FALSE,\n        extensions = c(\n          'Buttons',\n          # 'ColReorder'\n          'Responsive'\n        ),\n        \n        options = list(\n          dom = 'Bfrtip',\n          # autoWidth = T,\n          # lengthMednu = list(c(5,10,25,50,100,-1), c(\"5\",\"10\",\"25\",\"50\",\"100\",\"All\")),\n          buttons = list('csv',I('colvis')),\n          # colReorder = TRUE,\n          Responsive = T\n        )\n      )\n      \n    }else{\n      return(NULL)\n    }\n  })\n  \n  output$ViewTable3 <- DT::renderDataTable({\n    if(is.null(numberOfTables())) return(NULL)\n    \n    if(numberOfTables() >= 3){\n      \n      table <- CutpointFiles()[[3]]\n      table$Subject <- gsub(\"\\\\[\",\"\",table$Subject)\n      table$Subject <- gsub(\"\\\\]\",\"\",table$Subject)\n      table$Subject <- gsub(\"\\\\(\",\"\",table$Subject)\n      table$Subject <- gsub(\"\\\\)\",\"\",table$Subject)\n      table$Subject <- as.character(table$Subject)\n      \n      \n      \n      \n      foreach(i =1:dim(table)[2], .combine = c) %dopar%{\n        if(all(is.na(table[[i]])) == TRUE){\n          return(i)\n        }\n      } -> selection\n      \n      if(length(selection) != 0){\n        table <- data.table(table %>% select(-c(selection)))\n      }\n      \n      rm(selection)\n      \n      table[[dim(table)[2]]] <- gsub(\"\\\\[\",\"\",table[[dim(table)[2]]])\n      table[[dim(table)[2]]] <- gsub(\"\\\\]\",\"\",table[[dim(table)[2]]])\n      table[[dim(table)[2]]] <- gsub(\"\\\\(\",\"\",table[[dim(table)[2]]])\n      table[[dim(table)[2]]] <- gsub(\"\\\\)\",\"\",table[[dim(table)[2]]])\n      table[[dim(table)[2]]] <- as.character(table[[dim(table)[2]]])\n      \n      datatable(\n        table,\n        rownames = F,\n        # selection=\"multiple\",\n        # escape=FALSE,\n        extensions = c(\n          'Buttons',\n          # 'ColReorder'\n          'Responsive'\n        ),\n        \n        options = list(\n          dom = 'Bfrtip',\n          # autoWidth = T,\n          # lengthMednu = list(c(5,10,25,50,100,-1), c(\"5\",\"10\",\"25\",\"50\",\"100\",\"All\")),\n          buttons = list('csv',I('colvis')),\n          # colReorder = TRUE,\n          Responsive = T\n        )\n      )\n      \n    }else{\n      return(NULL)\n    }\n  })\n  \n  output$ViewTable4 <- DT::renderDataTable({\n    if(is.null(numberOfTables())) return(NULL)\n    if(numberOfTables() >= 4){\n      \n      table <- CutpointFiles()[[4]]\n      table$Subject <- gsub(\"\\\\[\",\"\",table$Subject)\n      table$Subject <- gsub(\"\\\\]\",\"\",table$Subject)\n      table$Subject <- gsub(\"\\\\(\",\"\",table$Subject)\n      table$Subject <- gsub(\"\\\\)\",\"\",table$Subject)\n      table$Subject <- as.character(table$Subject)\n      \n      \n      \n      \n      foreach(i =1:dim(table)[2], .combine = c) %dopar%{\n        if(all(is.na(table[[i]])) == TRUE){\n          return(i)\n        }\n      } -> selection\n      \n      if(length(selection) != 0){\n        table <- data.table(table %>% select(-c(selection)))\n      }\n      \n      rm(selection)\n      \n      table[[dim(table)[2]]] <- gsub(\"\\\\[\",\"\",table[[dim(table)[2]]])\n      table[[dim(table)[2]]] <- gsub(\"\\\\]\",\"\",table[[dim(table)[2]]])\n      table[[dim(table)[2]]] <- gsub(\"\\\\(\",\"\",table[[dim(table)[2]]])\n      table[[dim(table)[2]]] <- gsub(\"\\\\)\",\"\",table[[dim(table)[2]]])\n      table[[dim(table)[2]]] <- as.character(table[[dim(table)[2]]])\n      \n      datatable(\n        table,\n        rownames = F,\n        # selection=\"multiple\",\n        # escape=FALSE,\n        extensions = c(\n          'Buttons',\n          # 'ColReorder'\n          'Responsive'\n        ),\n        \n        options = list(\n          dom = 'Bfrtip',\n          # autoWidth = T,\n          # lengthMednu = list(c(5,10,25,50,100,-1), c(\"5\",\"10\",\"25\",\"50\",\"100\",\"All\")),\n          buttons = list('csv',I('colvis')),\n          # colReorder = TRUE,\n          Responsive = T\n        )\n      )\n      \n    }else{\n      return(NULL)\n    }\n    \n  })\n  \n  output$ViewTable5 <- DT::renderDataTable({\n    if(is.null(numberOfTables())) return(NULL)\n    if(numberOfTables() >= 5){\n      \n      table <- CutpointFiles()[[5]]\n      table$Subject <- gsub(\"\\\\[\",\"\",table$Subject)\n      table$Subject <- gsub(\"\\\\]\",\"\",table$Subject)\n      table$Subject <- gsub(\"\\\\(\",\"\",table$Subject)\n      table$Subject <- gsub(\"\\\\)\",\"\",table$Subject)\n      table$Subject <- as.character(table$Subject)\n      \n      \n      \n      \n      foreach(i =1:dim(table)[2], .combine = c) %dopar%{\n        if(all(is.na(table[[i]])) == TRUE){\n          return(i)\n        }\n      } -> selection\n      \n      if(length(selection) != 0){\n        table <- data.table(table %>% select(-c(selection)))\n      }\n      \n      rm(selection)\n      \n      table[[dim(table)[2]]] <- gsub(\"\\\\[\",\"\",table[[dim(table)[2]]])\n      table[[dim(table)[2]]] <- gsub(\"\\\\]\",\"\",table[[dim(table)[2]]])\n      table[[dim(table)[2]]] <- gsub(\"\\\\(\",\"\",table[[dim(table)[2]]])\n      table[[dim(table)[2]]] <- gsub(\"\\\\)\",\"\",table[[dim(table)[2]]])\n      table[[dim(table)[2]]] <- as.character(table[[dim(table)[2]]])\n      \n      datatable(\n        table,\n        rownames = F,\n        # selection=\"multiple\",\n        # escape=FALSE,\n        extensions = c(\n          'Buttons',\n          # 'ColReorder'\n          'Responsive'\n        ),\n        \n        options = list(\n          dom = 'Bfrtip',\n          # autoWidth = T,\n          # lengthMednu = list(c(5,10,25,50,100,-1), c(\"5\",\"10\",\"25\",\"50\",\"100\",\"All\")),\n          buttons = list('csv',I('colvis')),\n          # colReorder = TRUE,\n          Responsive = T\n        )\n      )\n      \n    }else{\n      return(NULL)\n    }\n  })\n  \n  output$ViewTable6 <- DT::renderDataTable({\n    if(is.null(numberOfTables())) return(NULL)\n    if(numberOfTables() >= 6){\n      \n      table <- CutpointFiles()[[6]]\n      table$Subject <- gsub(\"\\\\[\",\"\",table$Subject)\n      table$Subject <- gsub(\"\\\\]\",\"\",table$Subject)\n      table$Subject <- gsub(\"\\\\(\",\"\",table$Subject)\n      table$Subject <- gsub(\"\\\\)\",\"\",table$Subject)\n      table$Subject <- as.character(table$Subject)\n      \n      \n      \n      \n      foreach(i =1:dim(table)[2], .combine = c) %dopar%{\n        if(all(is.na(table[[i]])) == TRUE){\n          return(i)\n        }\n      } -> selection\n      \n      if(length(selection) != 0){\n        table <- data.table(table %>% select(-c(selection)))\n      }\n      \n      rm(selection)\n      \n      table[[dim(table)[2]]] <- gsub(\"\\\\[\",\"\",table[[dim(table)[2]]])\n      table[[dim(table)[2]]] <- gsub(\"\\\\]\",\"\",table[[dim(table)[2]]])\n      table[[dim(table)[2]]] <- gsub(\"\\\\(\",\"\",table[[dim(table)[2]]])\n      table[[dim(table)[2]]] <- gsub(\"\\\\)\",\"\",table[[dim(table)[2]]])\n      table[[dim(table)[2]]] <- as.character(table[[dim(table)[2]]])\n      \n      datatable(\n        table,\n        rownames = F,\n        # selection=\"multiple\",\n        # escape=FALSE,\n        extensions = c(\n          'Buttons',\n          # 'ColReorder'\n          'Responsive'\n        ),\n        \n        options = list(\n          dom = 'Bfrtip',\n          # autoWidth = T,\n          # lengthMednu = list(c(5,10,25,50,100,-1), c(\"5\",\"10\",\"25\",\"50\",\"100\",\"All\")),\n          buttons = list('csv',I('colvis')),\n          # colReorder = TRUE,\n          Responsive = T\n        )\n      )\n      \n    }else{\n      return(NULL)\n    }\n  })\n  \n  \n  output$table <- DT::renderDataTable({\n    if(is.null(dataset())) return(NULL)\n    \n    \n    \n    \n    if(is.null(ApplyAscii())){\n      \n      table <- dataset()\n      \n      if (names(table)[1] %in% \"V1\"){\n        table[,V1:= NULL]\n      }\n      \n      colNames <- names(table)\n      foreach(i=1:length(colNames)) %do%{\n        colNames[i] <- stri_trim(colNames[i])\n      }\n      setnames(table, names(table), colNames); rm(colNames)\n      foreach(i =1:dim(table)[2], .combine = c) %dopar%{\n        if(all(is.na(table[[i]])) == TRUE){\n          return(i)\n        }\n      } -> selection\n      \n      if(length(selection) != 0){\n        table <- data.table(table %>% select(-c(selection)))\n      }\n      \n      \n      \n    }else if(ApplyAscii()$case == 2){\n      table <- dataset()\n      \n      if (names(table)[1] %in% \"V1\"){\n        table[,V1:= NULL]\n      }\n      \n      colNames <- names(table)\n      foreach(i=1:length(colNames)) %do%{\n        colNames[i] <- stri_trim(colNames[i])\n      }\n      setnames(table, names(table), colNames); rm(colNames)\n      foreach(i =1:dim(table)[2], .combine = c) %dopar%{\n        if(all(is.na(table[[i]])) == TRUE){\n          return(i)\n        }\n      } -> selection\n      \n      if(length(selection) != 0){\n        table <- data.table(table %>% select(-c(selection)))\n      }\n      \n      if(length(names(table) !=0)){\n        setnames(\n          table,\n          names(table)[which(stri_trim(tolower(names(table)))%in% stri_trim(tolower(ApplyAscii()$all.variables)))],\n          ApplyAscii()$all.descriptions[which(stri_trim(tolower(ApplyAscii()$all.variables)) %in% stri_trim(tolower(names(table))))]\n        )\n      }\n      \n    }else{\n      \n      \n      table <- dataset()\n      if(names(table)[1] %in% \"V1\"){\n        table[,V1:= NULL]\n      }\n      \n      colNames <- names(table)\n      foreach(i=1:length(colNames)) %do%{\n        colNames[i] <- stri_trim(colNames[i])\n      }\n      setnames(table, names(table), colNames); rm(colNames)\n      \n      Map <- ApplyAscii()$map\n      \n      foreach(i=1:length(Map$variable)) %do%{\n        Map$variable <- as.character(Map$variable)\n        Map$variable[i] <- stri_trim(Map$variable[i])\n      }\n      foreach(i=1:length(Map$value)) %do%{\n        Map$value <- as.character(Map$value)\n        Map$value[i] <- stri_trim(Map$value[i])\n      }\n      foreach(i=1:length(Map$meaning)) %do%{\n        Map$meaning<- as.character(Map$meaning)\n        Map$meaning[i] <- stri_trim(Map$meaning[i])\n      }\n      \n      mappedVariables <- unique(Map$variable)\n      \n      foreach(i = 1:length(mappedVariables)) %do% {\n        map <- Map %>% filter(variable %in% mappedVariables[i])\n        \n        if(mappedVariables[i] %in% names(table)){\n          Col <- table[[which(names(table) %in% mappedVariables[i])]]\n          foreach(j= 1:length(map$value)) %do%{\n            Col[which(tolower(stri_trim(as.character(Col))) %in% tolower(stri_trim(as.character(map$value[j]))))] <- map$meaning[j]\n          }\n          \n          table[[which(names(table) %in% mappedVariables[i])]] <- Col\n        }\n      }\n      \n      table <- data.table(table)\n      \n      foreach(i =1:dim(table)[2], .combine = c) %dopar%{\n        if(all(is.na(table[[i]])) == TRUE){\n          return(i)\n        }\n      } -> selection\n      \n      if(length(selection) != 0){\n        table <- data.table(table %>% select(-c(selection)))\n      }\n      \n      \n      if(length(names(table) !=0)){\n        setnames(\n          table,\n          names(table)[which(stri_trim(tolower(names(table)))%in% stri_trim(tolower(ApplyAscii()$all.variables)))],\n          ApplyAscii()$all.descriptions[which(stri_trim(tolower(ApplyAscii()$all.variables)) %in% stri_trim(tolower(names(table))))]\n        )\n      }\n    }\n    \n    \n    \n    datatable(\n      table,\n      filter = 'top',\n      rownames = F,\n      selection=\"multiple\", \n      escape=FALSE,\n      extensions = c(\n        'Buttons',\n        'ColReorder',\n        'Responsive'\n      ),\n      \n      options = list(\n        dom = 'Bfrtip',\n        autoWidth = T,\n        lengthMednu = list(c(5,10,25,50,100,-1), c(\"5\",\"10\",\"25\",\"50\",\"100\",\"All\")),\n        buttons = list('excel' ,I('colvis')),\n        colReorder = TRUE,\n        Responsive = T\n      )\n    )\n    \n  })\n  \n  \n  ##=============================================================================\n  ##\n  ##                                  TAB 3 (COMPARING SPREADSHEETS)\n  ##\n  ##=============================================================================\n  \n  \n  \n  Path1 <- eventReactive(input$file1.path,{\n    \n    if(input$file1.path <= 0) return(NULL)\n    filepath <- choose.files(default = \"C:/Users\",\n                             caption = \"Select Spreadsheet\", multi = T\n    )\n    if(length(filepath) == 0) return(NULL)\n    \n    return(filepath)\n  }) \n  \n  Path2 <- eventReactive(input$file2.path,{\n    \n    if(input$file2.path <= 0) return(NULL)\n    filepath <- choose.files(default = \"C:/Users\",\n                             caption = \"Select Spreadsheet\", multi = T\n    )\n    if(length(filepath) == 0) return(NULL)\n    return(filepath)\n  }) \n  \n  File1 <- reactive({\n    \n    if(is.null(Path1())) return(NULL)\n    Get <- getCompareFiles(Path1())\n    if(Get$case == 1) return(NULL)\n    return(list(\"data\"=Get$data, \"keyOptions\" = Get$keyOptions))\n  })\n  \n  File2 <- reactive({\n    \n    if(is.null(Path2())) return(NULL)\n    Get <- getCompareFiles(Path2())\n    if(Get$case == 1) return(NULL)\n    return(list(\"data\"=Get$data, \"keyOptions\" = Get$keyOptions))\n  })\n  \n  \n  output$file1.status <- renderUI({\n    if(is.null(File1())){\n      return(tags$b(tags$em(\"NO SELECTION OR FILE CAN'T BE LOADED\")))\n    }else{\n      return(tags$b(tags$em(\"LOADED\")))\n    }\n  })\n  \n  output$file2.status <- renderUI({\n    if(is.null(File2())){\n      return(tags$b(tags$em(\"NO SELECTION OR FILE CAN'T BE LOADED\")))\n    }else{\n      return(tags$b(tags$em(\"LOADED\")))\n    }\n  })\n  \n  output$getKey1 <- renderUI({\n    if(is.null(File1())) return(NULL)\n    selectizeInput(\"GetKey1\",\"Select Key\",\n                   multiple = F,\n                   choices = c(\"Select\",sort(File1()$keyOptions)),\n                   selected = \"Select\"\n    )\n  })\n  \n  output$getKey2 <- renderUI({\n    if(is.null(File2())) return(NULL)\n    selectizeInput(\"GetKey2\",\"Select Key\",\n                   multiple = F,\n                   choices = c(\"Select\",sort(File2()$keyOptions)),\n                   selected = \"Select\"\n    )\n  })\n  \n  GETKEY1 <- reactive({\n    if(is.null(input$GetKey1)) return(NULL)\n    if(\"Select\" %in% input$GetKey1) return(NULL)\n    return(input$GetKey1)\n  })\n  \n  GETKEY2 <- reactive({\n    if(is.null(input$GetKey2)) return(NULL)\n    if(\"Select\" %in% input$GetKey2) return(NULL)\n    return(input$GetKey2)\n  })\n  \n  File.1 <- reactive({ \n    if(is.null(GETKEY1())) return(NULL)\n    \n    table <- data.table(File1()$data)\n    names(table)[which(names(table) %in% GETKEY1())] <- \"KEY\"\n    setkey(table,KEY)\n    return(table)\n    \n    \n  })\n  \n  File.2 <- reactive({\n    if(is.null(GETKEY2())) return(NULL) \n    table <- data.table(File2()$data)\n    names(table)[which(names(table) %in% GETKEY2())] <- \"KEY\"\n    setkey(table,KEY)\n    return(table)\n    \n  })\n  \n  \n  \n  \n  output$relevantcols1 <- renderUI({\n    if(is.null(File.1())) return(NULL)\n    Options <- names(File.1())[which(names(File.1()) != \"KEY\")]\n    selectizeInput(\"relevantCols1\", \n                   \"Relevant Columns from Spreadsheet #1\",\n                   multi= T,\n                   selected = \"\",\n                   choices = c(\"All\", Options)\n    )\n  })\n  \n  \n  output$relevantcols2 <- renderUI({\n    if(is.null(File.2())) return(NULL)\n    \n    Options <- names(File.2())[which(names(File.2()) != \"KEY\")]\n    selectizeInput(\"relevantCols2\", \n                   \"Relevant Columns from Spreadsheet #2\",\n                   multi= T,\n                   selected = \"\",\n                   choices = c(\"All\", Options)\n    )\n    \n  })\n  \n  \n  RelevantCols1 <- reactive({\n    if(is.null(input$relevantCols1)) return(NULL)\n    if(sum(input$relevantCols1 %in% \"\") != 0) return(NULL)\n    return(input$relevantCols1)\n    \n  })\n  \n  RelevantCols2 <- reactive({\n    if(is.null(input$relevantCols2)) return(NULL)\n    if(sum(input$relevantCols2 %in% \"\") != 0)return(NULL)\n    return(input$relevantCols2)\n    \n  })\n  \n  \n  output$whichFilterColumns1 <- renderUI({\n    if(is.null(File.1())) return(NULL)\n    Options <- names(File.1())[which(names(File.1()) != \"KEY\")]\n    selectizeInput(\"whichFilterCols1\", \n                   \"Filter By:\",\n                   multi= T,\n                   selected = \"None\",\n                   choices = c(\"None\",Options)\n    )\n  })\n  \n  output$whichFilterColumns2 <- renderUI({\n    if(is.null(File.2())) return(NULL)\n    Options <- names(File.2())[which(names(File.2()) != \"KEY\")]\n    selectizeInput(\"whichFilterCols2\", \n                   \"Filter By:\",\n                   multi= T,\n                   selected = \"None\",\n                   choices = c(\"None\",Options)\n    )\n  })\n  \n  output$whichFilterValues1 <- renderUI({\n    if(is.null(input$whichFilterCols1)) return(NULL)\n    if(\"None\" %in% input$whichFilterCols1){\n      return(NULL)\n    }else{\n      foreach(i=1:length(input$whichFilterCols1),.combine = c) %do%{\n        get <- which(names(File.1()) %in% input$whichFilterCols1[i])\n        get <- sort(str_trim(as.character(unique(File.1()[[get]]))))\n        get <- paste0(i,\"::\", get[1:length(get)])\n        return(get)\n      } -> Options; rm(get)\n    }\n    \n    \n    selectizeInput(\"whichFilterVals1\", \n                   \"\",\n                   multi= T,\n                   selected = \"None\",\n                   choices = c(\"None\",Options)\n    )\n    \n  })\n  \n  output$whichFilterValues2 <- renderUI({\n    if(is.null(input$whichFilterCols2)) return(NULL)\n    \n    if(\"None\" %in% input$whichFilterCols2){\n      return(NULL)\n    }else{\n      foreach(i=1:length(input$whichFilterCols2),.combine = c) %do%{\n        get <- which(names(File.2()) %in% input$whichFilterCols2[i])\n        get <- sort(str_trim(as.character(unique(File.2()[[get]]))))\n        get <- paste0(i,\"::\", get[1:length(get)])\n        return(get)\n      } -> Options\n    }\n    \n    selectizeInput(\"whichFilterVals2\", \n                   \"\",\n                   multi= T,\n                   selected = \"None\",\n                   choices = c(\"None\",Options)\n    )\n    \n  })\n  \n  output$apply.filters <- renderUI({\n    if(is.null(File.1())) return(NULL)\n    if(is.null(File.2())) return(NULL)\n    \n    radioButtons(\"applyFilters\", \n                 label = \"Apply Filter(s)\",\n                 choices = c(\"No\",\"Yes\"),\n                 selected = \"No\",\n                 inline = T\n                 )\n  })\n  \n  \n  ApplyFilters <- reactive({\n    if(is.null(input$applyFilters)) return(NULL)\n    if(\"No\" %in% input$applyFilters) return(NULL)\n    \n    condition1 <- is.null(input$whichFilterCols1) | is.null(input$whichFilterVals1) | \"None\" %in% input$whichFilterVals1 | length(input$whichFilterVals1) == 0\n    condition2 <- is.null(input$whichFilterCols2) | is.null(input$whichFilterVals2) | \"None\" %in% input$whichFilterVals2 | length(input$whichFilterVals2) == 0\n    flag <- condition1 & condition2\n    if(flag %in% TRUE) return(NULL)\n    \n    \n    if(condition1 %in% F & condition2 %in% T ) return(1)\n    if(condition2 %in% F & condition1 %in% T ) return(2)\n    if(condition1 %in% F & condition2 %in% F ) return(3)\n  })\n  \n  \n  FILE1 <- reactive({\n    if(is.null(File.1())) return(NULL)\n    if(!is.null(ApplyFilters())){\n      if(ApplyFilters() %in% c(1,3)){\n        table <- FilterBy(File.1(), input$whichFilterCols1,input$whichFilterVals1)\n        if(dim(table)[1] == 0) return(NULL)\n        setkey(table,KEY)\n        return(table)\n      }else{\n        return(File.1())\n      }\n      \n    }else{\n      return(File.1())\n    }\n  })\n  \n  \n  FILE2 <- reactive({\n    if(is.null(File.2())) return(NULL)\n    if(!is.null(ApplyFilters())){\n      if(ApplyFilters() %in% c(2,3)){\n        table <- FilterBy(File.2(), input$whichFilterCols2,input$whichFilterVals2) \n        if(dim(table)[1] == 0) return(NULL)\n        setkey(table,KEY)\n        return(table)\n      }else{\n        return(File.2())\n      }\n      \n    }else{\n      return(File.2())\n    }\n  })\n  \n  \n  \n  compare <- reactive({\n    return(compareFiles(FILE1(),RelevantCols1(),FILE2(),RelevantCols2()))\n  })\n  \n  compareGO <- eventReactive(input$compareButton, {\n    if(input$compareButton <= 0) return(NULL)\n    if(is.null(FILE1())) return(NULL)\n    if(is.null(FILE2())) return(NULL)\n    if(is.null(RelevantCols1())) return(NULL)\n    if(is.null(RelevantCols2())) return(NULL)\n    return(compare())\n    \n  })\n  \n  \n  output$displayComparisonReport<- renderUI({\n    if(is.null(compareGO)) return(NULL)\n    \n    if(compareGO()$case != 1 & compareGO()$case != 2 ){\n      tabsetPanel(type = \"tabs\", \n                  tabPanel(\"Summary\", uiOutput(\"reportText\"))\n                  )\n      \n    }else{\n      \n      if(compareGO()$case == 1){\n        tabsetPanel(type = \"tabs\", \n                    tabPanel(\"Summary\", uiOutput(\"reportText\")), \n                    tabPanel(\"Records with Perfect Match\", DT::dataTableOutput(\"perfect_match\")),\n                    tabPanel(\"Records in File#1 but not in File#2\", DT::dataTableOutput(\"in_1_not_2\")),\n                    tabPanel(\"Records in File#2 but not in File#1\", DT::dataTableOutput(\"in_2_not_1\"))\n                    )\n        \n      }else{\n        \n        tabsetPanel(type = \"tabs\", \n                    tabPanel(\"Summary\", uiOutput(\"reportText\")),\n                    tabPanel(\"Records with Perfect Match\", DT::dataTableOutput(\"perfect_match\")),\n                    tabPanel(\"Records with Mismatches\", DT::dataTableOutput(\"mismatch_records\")),\n                    tabPanel(\"Records in File#1 but not in File#2\", DT::dataTableOutput(\"in_1_not_2\")),\n                    tabPanel(\"Records in File#2 but not in File#1\",DT::dataTableOutput(\"in_2_not_1\"))\n                    )\n        \n      }\n      \n      \n    }\n  \n    \n  })\n  \n  \n  output$reportText <- renderUI({\n    \n    if(compareGO()$case == 0){\n      return(tags$em(tags$b(\"No Common Key Values Between These Files\")))\n    }else if(compareGO()$case == 1){\n      return( HTML(paste0(\n        tags$em(tags$b(paste0(\"Number of Records with Perfect Match: \", dim(compareGO()$Match)[1]))),\n        tags$br(),\n        tags$em(tags$b(paste0(\"Number of Records in File#1 but not in File#2: \", dim(compareGO()$`IN-1-NOT-2`)[1]))),\n        tags$br(),\n        tags$em(tags$b(paste0(\"Number of Records in File#2 but not in File#1: \", dim(compareGO()$`IN-2-NOT-1`)[1]))))\n      ))\n      \n      \n    }else if(compareGO()$case == 2){\n      return(HTML(paste0(\n        tags$em(tags$b(paste0(\"Number of Records with Perfect Match: \", dim(compareGO()$Match)[1]))),\n        tags$br(),\n        tags$em(tags$b(paste0(\"Number of Records with Mismatch: \", dim(compareGO()$Mismatch)[1]))),\n        tags$br(),\n        tags$em(tags$b(paste0(\"Number of Records in File#1 but not in File#2: \", dim(compareGO()$`IN-1-NOT-2`)[1]))),\n        tags$br(),\n        tags$em(tags$b(paste0(\"Number of Records in File#2 but not in File#1: \", dim(compareGO()$`IN-2-NOT-1`)[1]))))\n      ))\n      \n    }else if(compareGO()$case == 3){\n      return(tags$em(tags$b(\"Something's wrong; I can't determine mismatching elements. FIX ME!\")))\n    }else if(compareGO()$case == 4){\n      return(tags$em(tags$b(\"Relevant Columns don't match\")))\n    }else{\n      return(tags$em(tags$b(\"FIX ME!\")))\n    }\n    \n    \n  })\n  \n  \n  \n  output$perfect_match <- DT::renderDataTable({\n    \n    if(compareGO()$case == 1 | compareGO()$case == 2){\n      datatable(\n        data.table(compareGO()$Match),\n        filter = 'top',\n        rownames = F,\n        selection=\"multiple\",\n        escape=FALSE,\n        extensions = c(\n          'Buttons',\n          'ColReorder',\n          'Responsive'\n        ),\n\n        options = list(\n          dom = 'Bfrtip',\n          autoWidth = T,\n          lengthMednu = list(c(5,10,25,50,100,-1), c(\"5\",\"10\",\"25\",\"50\",\"100\",\"All\")),\n          buttons = list('excel' ,I('colvis')),\n          colReorder = TRUE,\n          Responsive = T\n        )\n      )\n    }else{\n      \n      return(NULL)\n    }\n  \n  })\n  \n  \n  output$mismatch_records <- DT::renderDataTable({\n    \n    if(compareGO()$case == 2){\n      \n      \n      datatable(\n        data.table(compareGO()$Mismatch),\n        filter = 'top',\n        rownames = F,\n        selection=\"multiple\",\n        escape=FALSE,\n        extensions = c(\n          'Buttons',\n          'ColReorder',\n          'Responsive'\n        ),\n\n        options = list(\n          dom = 'Bfrtip',\n          autoWidth = T,\n          lengthMednu = list(c(5,10,25,50,100,-1), c(\"5\",\"10\",\"25\",\"50\",\"100\",\"All\")),\n          buttons = list('excel' ,I('colvis')),\n          colReorder = TRUE,\n          Responsive = T\n        )\n      )\n    }else{\n      return(NULL)\n    }\n  })\n  \n  \n  output$in_1_not_2 <- DT::renderDataTable({\n    \n    if(compareGO()$case == 1 |compareGO()$case == 2){\n      datatable(\n        data.table(compareGO()$`IN-1-NOT-2`),\n        filter = 'top',\n        rownames = F,\n        selection=\"multiple\",\n        escape=FALSE,\n        extensions = c(\n          'Buttons',\n          'ColReorder',\n          'Responsive'\n        ),\n\n        options = list(\n          dom = 'Bfrtip',\n          autoWidth = T,\n          lengthMednu = list(c(5,10,25,50,100,-1), c(\"5\",\"10\",\"25\",\"50\",\"100\",\"All\")),\n          buttons = list('excel' ,I('colvis')),\n          colReorder = TRUE,\n          Responsive = T\n        )\n      )\n    }else{\n      return(NULL)\n    }\n  })\n  \n  \n  output$in_2_not_1 <-  DT::renderDataTable({\n    \n    if(compareGO()$case == 1 | compareGO()$case == 2){\n     \n      datatable(\n        data.table(compareGO()$`IN-2-NOT-1`),\n        filter = 'top',\n        rownames = F,\n        selection=\"multiple\",\n        escape=FALSE,\n        extensions = c(\n          'Buttons',\n          'ColReorder',\n          'Responsive'\n        ),\n\n        options = list(\n          dom = 'Bfrtip',\n          autoWidth = T,\n          lengthMednu = list(c(5,10,25,50,100,-1), c(\"5\",\"10\",\"25\",\"50\",\"100\",\"All\")),\n          buttons = list('excel' ,I('colvis')),\n          colReorder = TRUE,\n          Responsive = T\n        )\n      )\n    }else{\n      return(NULL)\n    }\n  })\n  \n  \n  \n})\n",
    "created" : 1477925763217.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "2654256776",
    "id" : "B9EA0F4E",
    "lastKnownWriteTime" : 1478636545,
    "last_content_update" : 1478636545681,
    "path" : "C:/Users/temp_atadde/Desktop/MY STUFF/R Folders/QC App/server.R",
    "project_path" : "server.R",
    "properties" : {
    },
    "relative_order" : 2,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_source"
}